# Update kubeconfig to configure access to the cluster
aws eks update-kubeconfig --region us-east-1 --name my-cluster

# View information about the Kubernetes cluster
kubectl cluster-info

# View the list of nodes in the cluster
kubectl get nodes

# View detailed information about nodes, including IP addresses
kubectl get nodes -o wide

# Create a pod named "my-first-pod" using the nginx image
kubectl run my-first-pod --image=nginx

# View the list of pods in the cluster
kubectl get pods

# View detailed information about pods, including IP addresses
kubectl get -o wide pods

# View detailed information about a specific pod
kubectl describe pod my-first-pod

# Run a pod named "my-pod" with port 80 exposed using the nginx image
kubectl run my-pod --port=80 --image=nginx

# View the logs of a pod named "my-pod"
kubectl logs my-pod

# View the logs of a specific container within a pod
kubectl logs -c <container_name> <pod_name>

# View information about Kubernetes resources
kubectl explain pods

# Expose a pod named "my-first-pod" on port 80 with a ClusterIP service
kubectl expose pod my-first-pod --port=80 --type=clusterIP

# View information about services in the cluster
kubectl get service

# Expose a pod named "my-first-pod" on port 80 with a NodePort service
kubectl expose pod my-first-pod --port=80 --target-port=80 --type=NodePort

# Expose a pod named "my-pod" as a LoadBalancer service on port 80
kubectl expose pod my-pod --name my-pod-lb --type=LoadBalancer --port=80 --target-port=80

# Apply configurations from a YAML file (e.g., pod.yaml)
kubectl apply -f pod.yaml

# Execute a shell in a specific container within a pod
kubectl exec -it my-pod -c my-pod-container /bin/bash

# View available API resources in the cluster
kubectl api-resources

<<<<<<< HEAD
# Delete a pod named "my-pod"
kubectl delete pod my-pod
=======
---------------------------------------------------------
kubectl get namespaces 

kubectl get ns

kubectl create ns dev 

kubectl describe namespace <namespace-name>

kubectl delete namespace <namespace-name>

kubectl get -n dev all

kubectl get pods -n dev 

kubectl run my-pod --image=nginx -n dev 

kubectl apply -f <manifest-file.yaml> -n <namespace-name>

-------------------------------------------------------------------------

kubectl get deploy 
>>>>>>> 64ef9d8fa4c8f6cd8dfd12e70b1639f76644c12d

# View deployments in the cluster
kubectl get deploy

# View pods managed by a deployment
kubectl get pods

# View replica sets in the cluster
kubectl get rs

# Edit the replica set named "my-rs"
kubectl edit rs my-rs

# Scale down the replica set named "my-rs" to 0 replicas
kubectl scale rs --replicas=0 my-rs

# Edit the deployment named "my-deployment"
kubectl edit deploy my-deployment

<<<<<<< HEAD
# View available API resources in the cluster
kubectl api-resources

# Scale a stateful set named "my-ss" to 2 replicas
kubectl scale statefulset my-ss --replicas 2
=======
kubectl scale statefulset my-ss --replicas 2 

--------------------------------------------------------------------

kubectl get configmap 

kubectl get cm 

kubectl describe configmap my-vars 

kubectl exec -it my-ss-0 -- bash 

env 

------------------------------------------------- 

echo -n "Redhat" | base64 

kubectl get secret 

kubectl describe secret my-sec 


>>>>>>> 64ef9d8fa4c8f6cd8dfd12e70b1639f76644c12d
